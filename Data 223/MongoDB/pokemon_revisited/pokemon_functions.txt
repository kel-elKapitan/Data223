def attack_mod(p1, p2):
    # get the pokemon names and ids from the mongodb database
    p1_name = db.pokemon.find({'id': {'$eq':{p1}}},{'name':1})
    p2_name = db.pokemon.find({'id': {'$eq':{p2}}},{'name':1})

    # get the pokemon stats from the mongodb database
    p1 = db.pokemon.find({'id': {'$eq':{p1}}},{'attack':1, 'HP':1, 'defence':1, 'types':1})
    p2 = db.pokemon.find({'id': {'$eq':{p2}}},{'attack':1, 'HP':1, 'defence':1, 'types':1})





    # Grass type Attack modifier
    if 'grass' in p1.types and 'normal' in  p2.types:
        pass
        # no attack modifier needed
    elif 'grass' in p1.types and 'fire' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack * 2
    elif 'grass' in p1.types and 'water' in p2.types:
        p1.attack = p1.attack * 2
        p2.attack = p2.attack / 2
    elif 'grass' in p1.types and 'electric' in p2.types:
        p2.attack = p2.attack / 2 
    
    elif 'grass' in p1.types and 'grass' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack / 2
    
    elif 'grass' in p1.types and 'ice' in p2.types:
        p2.attack =- p2.attack * 2
    
    elif 'grass' in p1.types and 'fightiing' in p2.types:
        pass
        # no attack modifier needed
    elif 'grass' in  p1.types and 'poison' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack * 2
    
    elif 'grass' in p1.types and 'ground' in p2.types:
        p1.attack = p1.attack * 2
        p2.attack = p2.attack / 2
    
    elif 'grass' in p1.types and 'flying' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack * 2
    
    elif 'grass' in p1.types and 'pychic' in p2.types:
        pass
        # no attack modifier needed
    elif 'grass' in p1.types and 'bug' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack * 2
    
    elif 'grass' in p1.types and 'rock' in p2.types:
        p1.attack = p1.attack * 2
    
    elif 'grass' in p1.types and 'ghost' in p2.types:
        pass
       # no attack modifier needed
    elif 'grass' in p1.types and 'dragon' in p2.types:
        p1.attack = p1.attack / 2
    
    elif 'grass' in p1.types and 'dark' in p2.types:
        pass
        # no attack modifier needed
    elif 'grass' in p1.types and 'steel' in p2.types:
        p._attack = p1.attack / 2
    elif 'grass' in p1.types and 'fairy' in p2.types:
        pass
        # no attack modifier needed


    # Normal type Attack modifier
    if 'normal' in p1.types and 'normal' in  p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'fire' in p2.types:
        pass
    elif 'normal' in p1.types and 'water' in p2.types:
        pass
    elif 'normal' in p1.types and 'electric' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'ice' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'fightiing' in p2.types:
        p2.attack = p2.attack * 2 
    elif 'normal' in  p1.types and 'poison' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'ground' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'flying' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.get('types') and 'pychic' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'bug' in p2.types:
        pass
    # no attack modifier needed
    elif 'normal' in p1.types and 'rock' in p2.types:
        p1.attack = p1.attack / 2
    elif 'normal' in p1.types and 'ghost' in p2.types:
        p1_attack = 0
        p2_attack = 0
    elif 'normal' in p1.types and 'dragon' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'dark' in p2.types:
        pass
        # no attack modifier needed
    elif 'normal' in p1.types and 'steel' in p2.types:
        p1.attack = p1.attack / 2
    elif 'normal' in p1.types and 'fairy' in p2.types:
        pass
        # no attack modifier needed


    # Fire type Attack modifier
    if 'fire' in p1.types and 'fire' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack / 2
    elif 'fire' in p1.types and 'water' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack / 2
    elif 'fire' in p1.types and 'electric' in p2.types:
        pass
    elif 'fire' in p1.types and 'ice' in p2.types:
        p1.attack = p1.attack * 2
        p2.attack = p2.attack / 2
    elif 'fire' in p1.types and 'fightiing' in p2.types:
        pass
        # no attack modifier needed
    elif 'fire' in  p1.types and 'poison' in p2.types:
        pass
        # no attack modifier needed
    elif 'fire' in p1.types and 'ground' in p2.types:
        p2.attack = p2.attack * 2
    
    elif 'fire' in p1.types and 'flying' in p2.types:
        pass 
        # no attack modifier needed
    elif 'fire' in p1.types and 'pychic' in p2.types:
        pass
        # no attack modifier needed
    elif 'fire' in p1.types and 'bug' in p2.types:
        p1.attack = p1.attack * 2
        p2.attack = p2.attack / 2
    elif 'fire' in p1.types and 'rock' in p2.types:
        p1.attack = p1.attack / 2
        p2.attack = p2.attack * 2
    elif 'fire' in p1.types and 'ghost' in p2.types:
        pass
        # no attack modifier needed
    elif 'fire' in p1.types and 'dragon' in p2.types:
        p1.attack = p1.attack / 2
    elif 'fire' in p1.types and 'dark' in p2.types:
        pass
        # no attack modifier needed
    elif 'fire' in p1.types and 'steel' in p2.types:
        p1.attack = p1.attack * 2
        p2.attack = p2.attack / 2
    elif 'fire' in p1.types and 'fairy' in p2.types:
        p2.attack = p2.attack / 2


    # package p1 and p2 into dictionaries exactly like the input dictionaries
    p1 = {'id': p1.id, 'name': p1.name, 'attack': p1.attack, 'HP': p1.HP, 'defense': p1.defense, 'type': p1.types }
    p2 = {'id': p2.id, 'name': p2_name, 'attack': p2_attack, 'HP': p2.HP, 'defense': p2.defense, 'type': p2.types }


    return p1, p2

def get_random_pokemon_id():
    return random.randint(1,1010)

# Functions needed to run the main driver code
def get_pokemon_id(name):
    response= db.pokemon.find({'name': {'$eq':{name}}},{'id':1}) 
    pokemon_data=response.json() 
    id=pokemon_data['id'] 
    return id

def pokenames_id():
    # get the pokemon names from the mongodb database
    pokemon = db.pokemon.find({},{'name':1})

    return pokemon


# THE FIGHT FUNCTION

def battle(pokemon_1,pokemon_2):
    battle_result = {"pokemon_1": pokemon_1["name"], "pokemon_2": pokemon_2["name"], "winner": ""}

    pokemon_2['health'] = pokemon_2['HP'] + pokemon_2['defense']

    pokemon_1['health'] = pokemon_1['HP'] + pokemon_1['defense']


    if pokemon_1['name'] == 'ditto':
        pokemon_1 = pokemon_2

    elif pokemon_2['name'] == 'ditto':

        pokemon_2 = pokemon_1

    if pokemon_1['attack'] == 0 and pokemon_2['attack'] == 0:

        print('Attacks are ineffective. The match is a draw.')

    else:

        while pokemon_1['health'] > 0 and pokemon_2['health'] > 0:
            pokemon_2['health'] = pokemon_2['health'] - pokemon_1['attack']
            if pokemon_2['health'] > 0:
                print(f"{pokemon_2['name']} has {pokemon_2['health']}HP left")

            elif pokemon_2['health'] <= 0:
                print(pokemon_2['name'] + ' is on 0HP and unable to battle. Therefore, ' + pokemon_1['name'] + ' wins!')
                break

            pokemon_1['health'] = pokemon_1['health'] - pokemon_2['attack']

            if pokemon_1['health'] > 0:

                print(f"{pokemon_1['name']} has {pokemon_1['health']}HP left")

            elif pokemon_1['health'] <= 0:

                print(pokemon_1['name'] + ' is 0HP and unable to battle. Therefore, ' + pokemon_2['name'] + ' wins!')
                break

            while pokemon_1['health'] > 0 and pokemon_2['health'] > 0:

                battle_result["log"].append({pokemon_1['name']: pokemon_1["health"],

                pokemon_2["name"]: pokemon_2["health"]})



                if pokemon_1["health"] <= 0:

                    battle_result["winner"] = pokemon_2["name"]

                else:

                    battle_result["winner"] = pokemon_1["name"]



        db.matches.insert_one(battle_result)

    # Return the battle result
    print(battle(pokemon_1,pokemon_2))




def display_previous_battles():
    battles = db.matches.find({})

    for battle in battles:

        print("Pokemon 1:", battle["pokemon_1"])
        print("Pokemon 2:", battle["pokemon_2"])
        print("Winner:", battle["winner"])

        print("--------------------")


display_previous_battles()

